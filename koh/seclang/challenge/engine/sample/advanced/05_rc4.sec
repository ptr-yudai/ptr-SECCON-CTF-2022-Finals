func strlen(s) {
  i = 0;
  while s[i] { i = i + 1; }
  return i;
}

func hexprint(byte) {
  u = (byte as int) >> 4;
  l = (byte as int) & 0xf;
  if u < 10 {
    print((0x30 + u) as byte);
  } else {
    print((0x61 + u - 10) as byte);
  }
  if l < 10 {
    print((0x30 + l) as byte);
  } else {
    print((0x61 + l - 10) as byte);
  }
}

func KSA(key, S) {
  len = strlen(key);
  i = 0;
  while i < 0x100 {
    S[i] = i;
    i = i + 1;
  }

  t = 0;
  i = 0;
  j = 0;
  while i < 0x100 {
    j = (j + S[i] + (key[i % len] as int)) % 0x100;
    t = S[i];
    S[i] = S[j];
    S[j] = t;
    i = i + 1;
  }
}

func PRGA(S, plain, cipher) {
  rnd = 0;
  t = 0;
  i = 0;
  j = 0;
  n = 0;
  len = strlen(plain);
  while n < len {
    i = (i + 1) % 0x100;
    j = (j + S[i]) % 0x100;

    t = S[i];
    S[i] = S[j];
    S[j] = t;

    rnd = S[(S[i] + S[j]) % 0x100] as byte;
    cipher[n] = rnd ^ plain[n];

    n = n + 1;
  }
}

func RC4(plain, key, cipher) {
  S = [0; 0x100];
  KSA(key, S);
  PRGA(S, plain, cipher);
}

func main() {
  cipher = [0 as byte; 0x100];
  plain = "Hello, World!\x00";
  key = "SECCON2022\x00";
  RC4(plain, key, cipher);

  len = strlen(plain);
  i = 0;
  while i < len {
    hexprint(cipher[i]);
    i = i + 1;
  }
  print("\n");
}
